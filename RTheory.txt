When given two vectors of the same length, R simply performs the specified arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors
| are of different lengths, R 'recycles' the shorter vector until it is the same length as the longer vector.

If the length of the shorter vector does not divide evenly into the length of the longer vector, R will still apply the 'recycling' method, but will
| throw a warning to let you know something fishy might be going on.


| The simplest and most common data structure in R is the vector.
Vectors come in two different flavors: atomic vectors and lists. An atomic vector contains exactly one data type, whereas a list may contain multiple
| data types.

The way you tell R that you want to select some particular elements (i.e. a 'subset') from a vector is by placing an 'index vector' in square brackets
| immediately following the name of the vector.

 The dim() function tells us the 'dimensions' of an object.
 The dim() function allows you to get OR set the `dim` attribute for an R
| object. In this case, we assigned the value c(4, 5) to the `dim` attribute of my_vector.
dim(my_vector)<-c(4,5)

The xor() function stands for exclusive OR. If one argument evaluates to TRUE
| and one argument evaluates to FALSE, then this function will return TRUE, otherwise it will return FALSE.

| Which of the following evaluates to FALSE?

1: xor(identical(xor, 'xor'), 7 == 7.0)
2: xor(!isTRUE(TRUE), 6 > -1)
3: xor(!!TRUE, !!FALSE)
4: xor(4 >= 9, 8 != 8.0)

Selection: 4

ints<- sample(10)
Use the which() function to find the indices of ints that are greater than 7.
which(ints>7)

Like the which() function, the functions any() and all() take logical vectors as their argument. The any() function will return TRUE if one or more of
| the elements in the logical vector is TRUE. The all() function will return TRUE if every element in the logical vector is TRUE.

To understand computations in R, two slogans are helpful: 1. Everything that exists is an object. 2. Everything that happens is a function call.

 Dates are represented by the 'Date' class and times are represented by the 'POSIXct' and 'POSIXlt' classes. Internally, dates are stored as the number of
 days since 1970-01-01 and times are stored as either the number of seconds since 1970-01-01 (for 'POSIXct') or a list of seconds, minutes, hours, etc.
 (for 'POSIXlt').